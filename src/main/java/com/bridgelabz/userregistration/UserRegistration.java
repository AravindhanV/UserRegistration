/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.bridgelabz.userregistration;

import java.util.function.Predicate;
import java.util.regex.Pattern;

import com.bridgelabz.userregistration.NameException.ExceptionType;

@FunctionalInterface
interface InputValidation {
	boolean validate(String regex, String input);
}

public class UserRegistration {
	public static InputValidation validator = (regex, stringToValidate) -> {
		Pattern pattern = Pattern.compile(regex);
		return pattern.matcher(stringToValidate).matches();
	};
	static int i = 0;

	public boolean validateName(String name) throws NameException {
		try {
			if (UserRegistration.validator.validate("^[A-Z][a-z]{2,}", name)) {
				System.out.println("TRUE");
				return true;
			} else {
				throw new NameException("Please enter valid name", ExceptionType.NAME_INVALID);
			}
		} catch (NullPointerException e) {
			throw new NameException("Please enter valid name", ExceptionType.NAME_NULL);
		}
	}

	public boolean validateEmail(String email) throws EmailException {
		try {
			if (UserRegistration.validator
					.validate("^abc[a-z0-9]*([+\\-_.][a-z0-9]{3})?@[a-z0-9]+\\.[a-z]{2,3}(\\.[a-z]{2,3})?$", email)) {
				return true;
			} else {
				throw new EmailException("Please enter valid email", EmailException.ExceptionType.EMAIL_INVALID);
			}
		} catch (NullPointerException e) {
			throw new EmailException("Please enter valid email", EmailException.ExceptionType.EMAIL_NULL);
		}

	}

	public boolean validatePhone(String phone) throws PhoneException {
		try {
			Pattern pattern = Pattern.compile("^\\d{1,2}\\s\\d{10}$");
			if (UserRegistration.validator.validate("^\\d{1,2}\\s\\d{10}$", phone)) {
				return true;
			} else {
				throw new PhoneException("Please enter valid phone", PhoneException.ExceptionType.PHONE_INVALID);
			}
		} catch (NullPointerException e) {
			throw new PhoneException("Please enter valid phone", PhoneException.ExceptionType.PHONE_NULL);
		}
	}

	public static boolean validatePassword(String password) throws PasswordException {
		try {
			if (!validator.validate(".{7,}", password)) {
				throw new PasswordException("Please enter valid password",
						PasswordException.ExceptionType.PASSWORD_INVALID_SHORT);
			}

			if (!validator.validate(".*[A-Z].*", password)) {
				throw new PasswordException("Please enter valid password",
						PasswordException.ExceptionType.PASSWORD_INVALID_UPPERCASE);
			}

			if (!validator.validate(".*\\d.*", password)) {
				throw new PasswordException("Please enter valid passowrd",
						PasswordException.ExceptionType.PASSWORD_INVALID_DIGIT);
			}

			if (!validator.validate("^[a-zA-Z0-9]*[^a-zA-Z0-9][a-zA-Z0-9]*$", password)) {
				throw new PasswordException("Please enter valid password",
						PasswordException.ExceptionType.PASSWORD_INVALID_SPECIAL);
			}

			return true;
		} catch (NullPointerException e) {
			throw new PasswordException("Please enter valid password", PasswordException.ExceptionType.PASSWORD_NULL);
		}
	}
}
